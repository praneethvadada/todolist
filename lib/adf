import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: TodoApp(),
    );
  }
}

class TodoApp extends StatefulWidget {
  @override
  _TodoAppState createState() => _TodoAppState();
}

class _TodoAppState extends State<TodoApp> {
  List<Task> tasks = [];
  String newTask = '';
  DateTime selectedDate = DateTime.now();
  TimeOfDay selectedTime = TimeOfDay.now();
  Task? editingTask;

  @override
  void initState() {
    super.initState();
    loadTasks();
  }

  void loadTasks() async {
    final prefs = await SharedPreferences.getInstance();
    final tasksJson = prefs.getStringList('tasks');
    if (tasksJson != null) {
      setState(() {
        tasks.clear();
        tasks = tasksJson.map((taskJson) => Task.fromJson(taskJson)).toList();
      });
    }
  }

  void saveTasks() async {
    final prefs = await SharedPreferences.getInstance();
    final tasksJson = tasks.map((task) => task.toJson()).toList();
    prefs.setStringList('tasks', tasksJson);
  }

  void _showAddTaskDialog(BuildContext context) {
    String dialogTitle = 'Add Task';
    if (editingTask != null) {
      newTask = editingTask!.name;
      selectedDate = editingTask!.deadline;
      dialogTitle = 'Edit Task';
    } else {
      newTask = '';
      selectedDate = DateTime.now();
    }

    void _selectDate(BuildContext context) async {
      final DateTime? picked = await showDatePicker(
        context: context,
        initialDate: selectedDate,
        firstDate: DateTime(2000),
        lastDate: DateTime(2101),
      );
      if (picked != null && picked != selectedDate) {
        setState(() {
          selectedDate = picked;
        });
      }
    }

    void _selectTime(BuildContext context) async {
      final TimeOfDay? picked = await showTimePicker(
        context: context,
        initialTime: selectedTime,
      );
      if (picked != null) {
        setState(() {
          selectedTime = picked;
        });
      }
    }

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text(dialogTitle),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: TextEditingController(text: newTask),
                onChanged: (text) {
                  newTask = text;
                },
                decoration: InputDecoration(labelText: 'Task Name'),
              ),
              Row(
                children: [
                  Text('Deadline: '),
                  TextButton(
                    onPressed: () {
                      _selectDate(context);
                    },
                    child: Text(
                      "${selectedDate.toLocal()}".split(' ')[0],
                    ),
                  ),
                  TextButton(
                    onPressed: () {
                      _selectTime(context);
                    },
                    child: Text(
                      selectedTime.format(context),
                    ),
                  ),
                ],
              ),
            ],
          ),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                editingTask = null;
                Navigator.of(context).pop();
              },
              child: Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                if (editingTask != null) {
                  setState(() {
                    editingTask!.name = newTask;
                    editingTask!.deadline = DateTime(
                      selectedDate.year,
                      selectedDate.month,
                      selectedDate.day,
                      selectedTime.hour,
                      selectedTime.minute,
                    );
                  });
                } else {
                  setState(() {
                    if (newTask.isNotEmpty) {
                      tasks.add(Task(newTask, DateTime(
                        selectedDate.year,
                        selectedDate.month,
                        selectedDate.day,
                        selectedTime.hour,
                        selectedTime.minute,
                      )));
                    }
                  });
                }
                editingTask = null;
                Navigator.of(context).pop();
                saveTasks();
              },
              child: Text('Save'),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    loadTasks();
    return Scaffold(
      appBar: AppBar(
        title: Text('To-Do App'),
      ),
      body: tasks.isEmpty
          ? Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.check_circle,
                    size: 100,
                    color: Colors.grey,
                  ),
                  Text(
                    'No Tasks',
                    style: TextStyle(fontSize: 24),
                  ),
                ],
              ),
            )
          : ListView.builder(
              itemCount: tasks.length,
              itemBuilder: (context, index) {
                Task task = tasks[index];
                Color indicatorColor = determineIndicatorColor(task.deadline);
                return Dismissible(
                  key: Key(task.name),
                  onDismissed: (direction) {
                    setState(() {
                      tasks.removeAt(index);
                    });
                    saveTasks();
                  },
                  background: Container(
                    color: Colors.red,
                    child: Icon(Icons.delete, color: Colors.white),
                  ),
                  child: ListTile(
                    title: Text(
                      task.name,
                      style: TextStyle(color: indicatorColor),
                    ),
                    subtitle: Text('Deadline: ${task.deadline.toString()}'),
                    onTap: () {
                      editingTask = task; // Set the task to be edited
                      _showAddTaskDialog(context);
                    },
                  ),
                );
              },
            ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          _showAddTaskDialog(context);
        },
        child: Icon(Icons.add),
      ),
    );
  }

  Color determineIndicatorColor(DateTime deadline) {
    DateTime now = DateTime.now();
    Duration difference = deadline.difference(now);
    if (difference.isNegative) {
      return Colors.red; // Task is overdue
    } else if (difference <= Duration(minutes: 30)) {
      return Colors.orange; // Task deadline is within 30 minutes
    } else {
      return Colors.green; // Task has more than 30 minutes
    }
  }
}

class Task {
  String name;
  DateTime deadline;

  Task(this.name, this.deadline);

  String toJson() {
    return '{"name": "$name", "deadline": "${deadline.toIso8601String()}" }';
  }

  factory Task.fromJson(String json) {
    final map = Map<String, dynamic>.from(jsonDecode(json));
    return Task(map['name'], DateTime.parse(map['deadline']));
  }
}
